用户程序虚存分布：

参见
    /include/conf.h
    /boot/kernel.ld
    /user/user.ld

0xFFFFFFFFF ┌─────────────────────────────────────────────────────────┐
            │  USER_MAP_TOP (0xFFFFFFFFF)                             │
            ├─────────────────────────────────────────────────────────┤
            │  [动态内存映射区]                                        │
            │  范围: 0xA00000000 ~ 0xFFFFFFFFF                        │
            │  (USER_MAP_BOTTOM ~ USER_MAP_TOP)                        │
            │  用途: mmap/heap/共享库等                                │
0xA00000000 ├─────────────────────────────────────────────────────────┤
            │                                                         │
            │  ├─ .eh_frame (异常处理帧)                                │
            │  ├─ .bss (未初始化数据, RW-)                             │
            │  ├─ .data (已初始化数据, RW-)                            │
            │  ├─ .rodata (只读数据, R--)                              │
            │  ├─ .text (代码段, R-X)                                  │
            │  PROVIDE(uend = .)  // 程序结束地址                        │
            │  USER_TEXT_BASE = 0x200000000                           │
            │  [用户代码与数据段] (链接脚本定义)                        │
            │                                                         │
0x200000000 ├─────────────────────────────────────────────────────────┤
0x1FFFFF000 ├─────────────────────────────────────────────────────────┤
            │  [线程栈区] (向下增长)                                   │
            │  USER_STACK_TOP(tid) =                                   │
            │     0x200000000 - 0x1000 - tid*(USER_STACK_SIZE+4K) - (8)│
            │  ├─ 每个线程栈大小: 8MB (USER_STACK_SIZE)                │
            │  ├─ 栈间隔离: 4K guard page                              │
            │  (tid=0 的栈顶: 0x200000000 - 0x1000 - 8 ≈ 0x1FFFFF000)  │
            │                                                         │
            ├─────────────────────────────────────────────────────────┤
            │                                                         │
            │  (固定占用 1页 + 4页参数页)                               │
            │  ├─ 环境变量字符串(暂未实现)                              │
            │  ├─ 参数字符串 (如 "./a.out")                            │
            │  ├─ 参数指针表 (char* argv[])                            │
            │  USER_ARGS_PAGE = 0x150000000                           │
            │  [参数与环境变量区]                                      │
0x150000000 ├─────────────────────────────────────────────────────────┤
    .
    .
    .                                                                  
            ├─────────────────────────────────────────────────────────┤   
            │          用户入口、出口    start.s          user_entry   │
            │                  1. jalr elf.entry                      │
            │                  2. exit(0)                             │
            │   所有用户共享，为了简单，直接映射到内核，用户可访问         |
内核代码段中 ├─────────────────────────────────────────────────────────┤

; 好吧，其实不一定从 0x200,000,000开始代码都行，我们的内核做了一些小适配
; 核心是入口函数 user_entry 跳转到你的开始位置，
; 开始位置由 elf.entry给出，也就是user.ld的起始地址
; 我们只是为了方便一统。我们将参数与栈放在这里放好固定了。
; 其余的，如果按照我们的 user.ld 来的话，将代码起始地址放在
;  0x1FFFFF000 和 0xA00000000 之间都行（需要页对齐）
; 如果靠近 0xA00000000 的话，需要注意越界。
; 其它空间最好别乱搞，我也不知道后面内核会拿某一块空间干莫事
